name: Release CLI Binary

on:
  push:
    tags:
      - 'v*.*.*' # Trigger this workflow when a new tag like v1.0.0 is pushed

jobs:
  build:
    name: Build ${{ matrix.target_os }}-${{ matrix.target_arch }}
    runs-on: ubuntu-latest # Use Ubuntu as the runner for all builds
    strategy:
      matrix:
        # Define the OS/Architecture combinations you want to build for
        target_os: [linux, darwin, windows]
        target_arch: [amd64, arm64] # Add arm64 for Apple Silicon (darwin) and ARM Linux
        # Exclude specific combinations if they are not supported or desired
        exclude:
          - target_os: windows
            target_arch: arm64 # Windows ARM64 is less common for CLI tools

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22' # Specify the Go version you want to build with

    - name: Set output filename
      id: set_filename
      run: |
        BINARY_NAME="${{ github.event.repository.name }}"
        case ${{ matrix.target_os }} in
          windows)
            echo "ASSET_NAME=${BINARY_NAME}-${{ matrix.target_os }}-${{ matrix.target_arch }}.zip" >> $GITHUB_OUTPUT
            echo "BINARY_PATH=${BINARY_NAME}.exe" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "ASSET_NAME=${BINARY_NAME}-${{ matrix.target_os }}-${{ matrix.target_arch }}.tar.gz" >> $GITHUB_OUTPUT
            echo "BINARY_PATH=${BINARY_NAME}" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Build and Package
      env:
        GOOS: ${{ matrix.target_os }}
        GOARCH: ${{ matrix.target_arch }}
        CGO_ENABLED: 0 # Disable CGO for static binaries (recommended for simpler distribution)
      run: |
        mkdir -p dist
        # Build the binary
        go build -o dist/${{ steps.set_filename.outputs.BINARY_PATH }} .

        # Compress the binary
        if [ "${{ matrix.target_os }}" = "windows" ]; then
          cd dist
          zip ${{ steps.set_filename.outputs.ASSET_NAME }} ${{ steps.set_filename.outputs.BINARY_PATH }}
        else
          cd dist
          tar -czvf ${{ steps.set_filename.outputs.ASSET_NAME }} ${{ steps.set_filename.outputs.BINARY_PATH }}
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.set_filename.outputs.ASSET_NAME }}
        path: dist/${{ steps.set_filename.outputs.ASSET_NAME }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build # This job depends on all 'build' jobs completing successfully
    if: success() && github.ref_type == 'tag' # Only create release if builds passed and it's a tag push

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is automatically provided by GitHub
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Get all uploaded artifacts
      uses: actions/github-script@v6
      id: get_artifacts
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            status: 'success',
            branch: context.ref.replace('refs/tags/', ''),
            event: 'push',
            workflow_id: '${{ github.workflow_id }}', // ID of current workflow
          });

          // Filter for artifacts from the current tag push and the 'build' job
          const currentRunId = context.runId;
          const currentArtifacts = artifacts.data.workflow_runs
            .find(run => run.id === currentRunId)
            .artifacts_url;

          const response = await github.request(currentArtifacts);
          return response.data.artifacts.map(a => a.name);
        result-encoding: json

    - name: Download each artifact and upload to release
      run: |
        mkdir -p release_assets
        for artifact_name in $(echo "${{ steps.get_artifacts.outputs.result }}" | jq -r '.[]'); do
          echo "Downloading artifact: $artifact_name"
          gh run download ${{ github.run_id }} -n "$artifact_name" -D release_assets
        done

        # Re-list to ensure structure is correct after download
        ls -R release_assets

        # Upload assets to the release
        for file in release_assets/*/*; do # Adjust if your download structure is different
          if [ -f "$file" ]; then
            echo "Uploading $file to release"
            gh release upload "${{ steps.create_release.outputs.tag_name }}" "$file" --repo "${{ github.repository }}" --clobber
          else
            echo "Skipping non-file: $file"
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}