name: Release CLI Binary

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*' # Trigger this workflow when a new tag like v1.0.0 is pushed
env: # Define environment variables accessible to all jobs
  GO_VERSION: '1.24'

jobs:
  test:
    name: Run Go Tests
    runs-on: ubuntu-latest # Tests can typically run on a single OS/arch

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download Go modules
      run: go mod download

    - name: Run tests
      run: go test ./... -v
  build:
    name: Build ${{ matrix.target_os }}-${{ matrix.target_arch }}
    runs-on: ubuntu-latest # Use Ubuntu as the runner for all builds
    needs: test
    strategy:
      matrix:
        # Define the OS/Architecture combinations you want to build for
        target_os: [linux, darwin, windows]
        target_arch: [amd64, arm64] # Add arm64 for Apple Silicon (darwin) and ARM Linux
        # Exclude specific combinations if they are not supported or desired
        exclude:
          - target_os: windows
            target_arch: arm64 # Windows ARM64 is less common for CLI tools

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set output filename
      id: set_filename
      run: |
        BINARY_NAME="${{ github.event.repository.name }}"
        case ${{ matrix.target_os }} in
          windows)
            echo "ASSET_NAME=${BINARY_NAME}-${{ matrix.target_os }}-${{ matrix.target_arch }}.zip" >> $GITHUB_OUTPUT
            echo "BINARY_PATH=${BINARY_NAME}.exe" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "ASSET_NAME=${BINARY_NAME}-${{ matrix.target_os }}-${{ matrix.target_arch }}.tar.gz" >> $GITHUB_OUTPUT
            echo "BINARY_PATH=${BINARY_NAME}" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Build and Package
      env:
        GOOS: ${{ matrix.target_os }}
        GOARCH: ${{ matrix.target_arch }}
        CGO_ENABLED: 0 # Disable CGO for static binaries (recommended for simpler distribution)
      run: |
        mkdir -p dist
        # Build the binary
        go build -o dist/${{ steps.set_filename.outputs.BINARY_PATH }} .

        # Compress the binary
        if [ "${{ matrix.target_os }}" = "windows" ]; then
          cd dist
          zip ${{ steps.set_filename.outputs.ASSET_NAME }} ${{ steps.set_filename.outputs.BINARY_PATH }}
        else
          cd dist
          tar -czvf ${{ steps.set_filename.outputs.ASSET_NAME }} ${{ steps.set_filename.outputs.BINARY_PATH }}
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.set_filename.outputs.ASSET_NAME }}
        path: dist/${{ steps.set_filename.outputs.ASSET_NAME }}
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: success() && github.ref_type == 'tag'

    permissions:
      contents: write # For creating the release and uploading assets
      actions: read   # Not strictly needed for softprops/action-gh-release, but harmless
      # Removed: checks, pull-requests, statuses - often not needed for release action specifically

    steps:
    - name: Download all build artifacts
      # Keep this step as softprops/action-gh-release can directly consume files from a directory
      uses: actions/download-artifact@v4
      with:
        path: release_assets # Download all artifacts into this directory

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2 # Using the recommended action version 2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ github.ref }} # 'name' instead of 'release_name'
        draft: false
        prerelease: false
        # Here's the magic: Directly upload all downloaded artifacts!
        # This finds all files within any subdirectory under release_assets/
        files: release_assets/**/*
        # If you wanted to be more specific, e.g., only zip and tar.gz:
        # files: |
        #   release_assets/**/*.zip
        #   release_assets/**/*.tar.gz