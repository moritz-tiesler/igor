name: Release CLI Binary

on:
  push:
    tags:
      - 'v*.*.*' # Trigger this workflow when a new tag like v1.0.0 is pushed

jobs:
  build:
    name: Build ${{ matrix.target_os }}-${{ matrix.target_arch }}
    runs-on: ubuntu-latest # Use Ubuntu as the runner for all builds
    strategy:
      matrix:
        # Define the OS/Architecture combinations you want to build for
        target_os: [linux, darwin, windows]
        target_arch: [amd64, arm64] # Add arm64 for Apple Silicon (darwin) and ARM Linux
        # Exclude specific combinations if they are not supported or desired
        exclude:
          - target_os: windows
            target_arch: arm64 # Windows ARM64 is less common for CLI tools

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24' # Specify the Go version you want to build with

    - name: Set output filename
      id: set_filename
      run: |
        BINARY_NAME="${{ github.event.repository.name }}"
        case ${{ matrix.target_os }} in
          windows)
            echo "ASSET_NAME=${BINARY_NAME}-${{ matrix.target_os }}-${{ matrix.target_arch }}.zip" >> $GITHUB_OUTPUT
            echo "BINARY_PATH=${BINARY_NAME}.exe" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "ASSET_NAME=${BINARY_NAME}-${{ matrix.target_os }}-${{ matrix.target_arch }}.tar.gz" >> $GITHUB_OUTPUT
            echo "BINARY_PATH=${BINARY_NAME}" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Build and Package
      env:
        GOOS: ${{ matrix.target_os }}
        GOARCH: ${{ matrix.target_arch }}
        CGO_ENABLED: 0 # Disable CGO for static binaries (recommended for simpler distribution)
      run: |
        mkdir -p dist
        # Build the binary
        go build -o dist/${{ steps.set_filename.outputs.BINARY_PATH }} .

        # Compress the binary
        if [ "${{ matrix.target_os }}" = "windows" ]; then
          cd dist
          zip ${{ steps.set_filename.outputs.ASSET_NAME }} ${{ steps.set_filename.outputs.BINARY_PATH }}
        else
          cd dist
          tar -czvf ${{ steps.set_filename.outputs.ASSET_NAME }} ${{ steps.set_filename.outputs.BINARY_PATH }}
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.set_filename.outputs.ASSET_NAME }}
        path: dist/${{ steps.set_filename.outputs.ASSET_NAME }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build # This job depends on all 'build' jobs completing successfully
    if: success() && github.ref_type == 'tag'

    permissions:
      contents: write # For creating the release and uploading assets
      actions: read   # Needed by actions/github-script to list workflow runs/artifacts
      checks: read    # Good practice, often used with actions/github-script
      pull-requests: read # Not strictly needed for this, but common
      statuses: read    # Not strictly needed for this, but common

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is automatically provided by GitHub
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: release_assets # Download all artifacts into this directory

    - name: Install GitHub CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y gh

    - name: Upload artifacts to release
      run: |
        # The download-artifact action creates a directory for each artifact name.
        # So your structure will be release_assets/ASSET_NAME/actual_file
        # You need to iterate through these
        find release_assets -type f -print0 | while IFS= read -r -d $'\0' file; do
          if [ -f "$file" ]; then
            echo "Uploading $file to release"
            gh release upload "${{ github.ref_name }}" "$file" --repo "${{ github.repository }}" --clobber
          else
            echo "Skipping non-file: $file"
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}